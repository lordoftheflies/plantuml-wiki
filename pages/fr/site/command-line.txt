FIXME **This page is not fully translated, yet. Please help completing the translation.**\\ //(remove this paragraph once the translation is finished)//

**TITLE**: Utilisation dans un script à partir de la ligne de commande

**DESC**: The command line based provides several flags to parse text files and generates nice UML diagrams. You can also use wildcards to process several files at the same time.

====== Ligne de commande ======

Vous pouvez exécuter PlantUML par une ligne de commande:
    java -jar plantuml.jar file1 file2 file3

Cette commande va rechercher les ''@startXXX'' dans ''file1'', ''file2'' et ''file3''. Pour chaque diagramme, un fichier ''.png'' sera créé.

Pour traiter un répertoire en entier, vous pouvez aussi lancer:
    java -jar plantuml.jar "c:/directory1" "c:/directory2"

Cela va rechercher les ''@startXXX'' et ''@endXXX'' dans tous les fichiers ''.c'', ''.h'', ''.cpp'', ''.txt'', ''.pu'', ''.tex'', ''.html'', ''.htm'' ou ''.java'' des répertoires ''c:/directory1'' et ''c:/directory1''. 

====== Caractères génériques ======

Vous pouvez aussi utiliser des caractères génériques:

  * Pour un caractère unique, utilisez ''?''
  * Pour plusieurs caractères (y compris zéro caractères), utilisez ''*''
  * Si vous voulez aussi inclure les caractères spéciaux ''/'' et ''\''), utilisez une double étoile ''*''''*''

Pour traiter tous les fichiers ''.cpp'' des répertoires dont le nom commence par //dummy// :
    java -jar plantuml.jar "dummy*/*.cpp"

Pour traiter tous les fichiers ''.cpp'' des répertoires dont le nom commence par //dummy//, ainsi que leurs sous-répertoires:
    java -jar plantuml.jar "dummy*/**.cpp"

====== Exclure des fichiers ======

Vous pouvez exclure certains fichiers en utilisant l'option ''-x'':
    java -jar plantuml.jar -x "**/common/**" -x "**/test/Test*" "dummy*/**/*.cpp" 

====== Répertoire de sortie ======

Vous pouvez préciser un répertoire où seront générées toutes les images à l'aide de l'option ''-o'':
    java -jar plantuml.jar -o "c:/outputPng" "c:/directory2"

Si la commande parcourt récursivement plusieurs répertoires, il y a une petite différence selon que vous spécifiez un chemin absolu ou relatif pour ce répertoire de sortie:

  * __chemin absolu__: Un unique répertoire de sortie sera utilisé, contenant l’intégralité des images générées.
  * __chemin relatif__: Plusieurs répertoires de sortie seront générés, à travers l’arborescence parcourue par la commande.

====== Fichier de configuration ======

Vous pouvez fournir un fichier de configuration qui sera inclus avant chaque diagramme:
    java -jar plantuml.jar -config "./config.cfg" dir1

====== Code d'erreur ======

Quand il y a des erreurs dans un ou plusieurs diagrammes, la commande renvoie un code d'erreur (-1). Mais même s'il y a des diagrammes en erreur, **tous** les diagrammes sont générés, ce qui peut prendre du temps pour les projets de grande taille.

Vous pouvez utiliser l'option ''-failfast'' pour changer ce comportement et arrêter la génération des diagrammes dès qu'une erreur est rencontrée. Dans ce cas certains diagrammes seront effectivement générés et d'autres ne le seront pas.

Il y a aussi une option ''-failfast2'' qui effectue une première passe de vérification. Si jamais une erreur est présente, aucun diagramme ne sera généré dans ce cas. En cas d'erreur, l'option ''-failfast2'' permet à la commande de s'exécuter encore plus rapidement qu'avec ''-failfast'' ce qui peut être utile pour les très grands projets.

====== Entrée et sortie standard ======

Avec l'option ''-pipe'' vous pouvez facilement intégrer PlantUML dans vos scripts.

Lorsque l'option est activée, le texte du diagramme doit être envoyé à l'entrée standard de la commande et le fichier généré est récupéré dans la sortie standard. Aucun fichier n'est écrit sur disque.

Exemple:
    type somefile.txt | java -jar plantuml.jar -pipe > somefile.png


====== Aide ======

Vous pouvez afficher un message d'aide à l'aide de la commande:
    java -jar plantuml.jar -help

Cela imprime la sortie suivante: 
<code>
Usage: java -jar plantuml.jar [options] -gui
	(to execute the GUI)
    or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]
	(to process files or directories)

You can use the following wildcards in files/dirs:
	*	means any characters but '\'
	?	one and only one character but '\'
	**	means any characters (used to recurse through directories)

where options include:
    -gui			To run the graphical user interface
    -tpng			To generate images using PNG format (default)
    -tsvg			To generate images using SVG format
    -teps			To generate images using EPS format
    -tpdf			To generate images using PDF format
    -tvdx			To generate images using VDX format
    -txmi			To generate XMI file for class diagram
    -tscxml			To generate SCXML file for state diagram
    -thtml			To generate HTML file for class diagram
    -ttxt			To generate images with ASCII art
    -tutxt			To generate images with ASCII art using Unicode characters
    -tlatex			To generate images using LaTeX/Tikz format
    -tlatex:nopreamble		To generate images using LaTeX/Tikz format without preamble
    -o[utput] "dir"		To generate images in the specified directory
    -DVAR1=value		To set a preprocessing variable as if '!define VAR1 value' were used
    -Sparam1=value		To set a skin parameter as if 'skinparam param1 value' were used
    -r[ecurse]			recurse through directories
    -I/path/to/file		To include file as if '!include file' were used
    -I/path/to/*.puml		To include files with pattern
    -charset xxx		To use a specific charset (default is windows-1252)
    -e[x]clude pattern		To exclude files that match the provided pattern
    -metadata			To retrieve PlantUML sources from PNG images
    -version			To display information about PlantUML and Java versions
    -checkversion		To check if a newer version is available for download
    -v[erbose]			To have log information
    -quiet			To NOT print error message into the console
    -keepfiles			To NOT delete temporary files after process
    -h[elp]			To display this help message
    -testdot			To test the installation of graphviz
    -graphvizdot "exe"		To specify dot executable
    -p[ipe]			To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation
    -encodesprite 4|8|16[z] "file"	To encode a sprite at gray level (z for compression) from an image
    -computeurl|-encodeurl		To compute the encoded URL of a PlantUML source file
    -decodeurl			To retrieve the PlantUML source from an encoded URL
    -syntax			To report any syntax error from standard input without generating images
    -language			To print the list of PlantUML keywords
    -nosuggestengine		To disable the suggest engine when errors in diagrams
    -checkonly			To check the syntax of files without generating images
    -failfast			To stop processing as soon as a syntax error in diagram occurs
    -failfast2			To do a first syntax check before processing files, to fail even faster
    -pattern			To print the list of Regular Expression used by PlantUML
    -duration			To print the duration of complete diagrams processing
    -nbthread N			To use (N) threads for processing
    -nbthread auto		To use 4 threads for processing
    -author[s]			To print information about PlantUML authors
    -overwrite			To allow to overwrite read only files
    -printfonts			To print fonts available on your system
    -enablestats		To enable statistics computation
    -disablestats		To disable statistics computation (default)
    -htmlstats			To output general statistics in file plantuml-stats.html
    -xmlstats			To output general statistics in file plantuml-stats.xml
    -realtimestats		To generate statistics on the fly rather than at the end
    -loopstats			To continuously print statistics about usage

If needed, you can setup the environment variable GRAPHVIZ_DOT.
</code>

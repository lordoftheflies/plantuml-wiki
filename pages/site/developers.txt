**TITLE**: Information for developers

**DESC**: If you want to integrate PlantUML with your own tool/software, you might be interested in some features that will help you. For example, you can use PlantUML parser.



Some features have been put in PlantUML to help
others people to integrate PlantUML in other tools.

===== Language =====

Some editors integrate PlantUML Language highlighting for text files ([[emacs|See here]]).

Since the PlantUML Language definition is still in progress, when
new keywords are added in the language, it could be an issue for
existing products.

An hidden option in the command line allows to turn around this:

    java -jar plantuml.jar -language

This command will output to the standard output a description of the
PlantUML Language, quite easy to parse:

<code>
;type
;10
abstract
actor
class
component
enum
interface
object
participant
state
usecase

;keyword
;43
@enduml
@startuml
activate
alt
[..]
up

;preprocessor
;6
!define
!endif
!ifdef
!ifndef
!include
!undef

;skinparameter
;145
ActivityArrowFontColor
ActivityArrowFontName
[..]
UsecaseStereotypeFontSize
UsecaseStereotypeFontStyle

;color
;140
AliceBlue
AntiqueWhite
Aqua
[..]
WhiteSmoke
Yellow
YellowGreen

;EOF
</code>

So, if you need to do something related to the PlantUML Language, you
can parse on the fly this output: your product will always be up-to-date
when people will upload the last **plantuml.jar** version.

===== Syntax check =====
If you have a text, and if you want to know if this text is a valid
PlantUML description, you can use the following command:

    type mytext.txt | java -jar plantuml.jar -syntax

This prints basic information to the standard output. The first
line contains one of the following words :''SEQUENCE'', ''STATE'',
''CLASS'', ''OBJECT'', ''ACTIVITY'', ''USECASE'',
''COMPONENT'', ''OTHER'' or ''ERROR''


__Examples__: (@startuml are optional in that usage) 

The following text:
<code>
Bob -> Alice : hello
</code>

will output:

<code>
SEQUENCE
(2 participants)
</code>

If there is an error in the text, the line number and the description of
the error is printed:

<code>
actor Bob
actor Bob
Bob -> Alice : hello
</code>

will output:
<code>
ERROR
2
Duplicate participant : Bob
</code>


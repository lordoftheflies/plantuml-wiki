<nodisp>TITLE: Archimate Support</nodisp>
<nodisp>DESC: Archimate Support</nodisp>

====== Archimate Diagram ======

__This is only a proposal and subject to change__.

You are very welcome [[http://forum.plantuml.net|to create a new discussion]] on this future syntax. Your feedbacks, ideas and suggestions help us to find the right solution.

===== Archimate keyword =====

You can use the ''archimate'' keyword to define an element. Stereotype can optionally specify an additional icon. Some colors (''Business'', ''Application'', ''Motivation'', ''Strategy'', ''Technology'', ''Physical'', ''Implementation'') are also available.

<columns 100% 50% ->
<code>
@startuml
archimate #Technology "VPN Server" as vpnServerA <<technology-device>>

rectangle GO #lightgreen
rectangle STOP #red
rectangle WAIT #orange
@enduml
</code>
<newcolumn>
<uml title="simple Archimate diagram">
archimate #Technology "VPN Server" as vpnServerA <<technology-device>>

rectangle GO #lightgreen
rectangle STOP #red
rectangle WAIT #orange
</uml>
</columns>

===== Defining Junctions =====

Using the ''circle'' keyword and the [[preprocessing|preprocessor]], you can also create junctions.

<columns 100% 50% ->
<code>
@startuml
!define Junction_Or circle #black
!define Junction_And circle #whitesmoke

Junction_And JunctionAnd
Junction_Or JunctionOr

archimate #Technology "VPN Server" as vpnServerA <<technology-device>>

rectangle GO #lightgreen
rectangle STOP #red
rectangle WAIT #orange
GO -up-> JunctionOr
STOP -up-> JunctionOr
STOP -down-> JunctionAnd
WAIT -down-> JunctionAnd
@enduml
</code>
<newcolumn>
<uml title="simple Archimate diagram">
!define Junction_Or circle #black
!define Junction_And circle #whitesmoke

Junction_And JunctionAnd
Junction_Or JunctionOr

archimate #Technology "VPN Server" as vpnServerA <<technology-device>>

rectangle GO #lightgreen
rectangle STOP #red
rectangle WAIT #orange
GO -up-> JunctionOr
STOP -up-> JunctionOr
STOP -down-> JunctionAnd
WAIT -down-> JunctionAnd
</uml>
</columns>

===== Example 1 =====

<code>
@startuml
sprite $bProcess jar:archimate/business-process
sprite $aService jar:archimate/application-service
sprite $aComponent jar:archimate/application-component

rectangle "Handle claim"  as HC <<$bProcess>> #yellow 
rectangle "Capture Information"  as CI <<$bProcess>> #yellow
rectangle "Notify\nAdditional Stakeholders" as NAS <<$bProcess>> #yellow
rectangle "Validate" as V <<$bProcess>> #yellow
rectangle "Investigate" as I <<$bProcess>> #yellow
rectangle "Pay" as P <<$bProcess>> #yellow

HC *-down- CI
HC *-down- NAS
HC *-down- V
HC *-down- I
HC *-down- P


CI -right->> NAS
NAS -right->> V
V -right->> I
I -right->> P



rectangle "Scanning" as scanning <<$aService>> #A9DCDF
rectangle "Customer admnistration" as customerAdministration <<$aService>> #A9DCDF
rectangle "Claims admnistration" as claimsAdministration <<$aService>> #A9DCDF
rectangle Printing  <<$aService>> #A9DCDF
rectangle Payment  <<$aService>> #A9DCDF

scanning -up-> CI
customerAdministration  -up-> CI
claimsAdministration -up-> NAS
claimsAdministration -up-> V
claimsAdministration -up-> I
Printing -up-> V
Printing -up-> P
Payment -up-> P

rectangle "Document\nManagement\nSystem" as DMS <<$aComponent>> #A9DCDF
rectangle "General\nCRM\nSystem" as CRM <<$aComponent>> #A9DCDF
rectangle "Home & Away\nPolicy\nAdministration" as HAPA <<$aComponent>> #A9DCDF
rectangle "Home & Away\nFinancial\nAdministration" as HFPA <<$aComponent>> #A9DCDF

DMS .up.|> scanning
DMS .up.|> Printing
CRM .up.|> customerAdministration
HAPA .up.|> claimsAdministration
HFPA .up.|> Payment

legend left
Example from the "Archisurance case study" (OpenGroup).
See 
==
<$bProcess> :business process
==
<$aService> : application service
==
<$aComponent> : appplication component
endlegend
@enduml
</code>

<uml title="simple Archimate diagram">
sprite $bProcess jar:archimate/business-process
sprite $aService jar:archimate/application-service
sprite $aComponent jar:archimate/application-component

rectangle "Handle claim"  as HC <<$bProcess>> #yellow 
rectangle "Capture Information"  as CI <<$bProcess>> #yellow
rectangle "Notify\nAdditional Stakeholders" as NAS <<$bProcess>> #yellow
rectangle "Validate" as V <<$bProcess>> #yellow
rectangle "Investigate" as I <<$bProcess>> #yellow
rectangle "Pay" as P <<$bProcess>> #yellow

HC *-down- CI
HC *-down- NAS
HC *-down- V
HC *-down- I
HC *-down- P


CI -right->> NAS
NAS -right->> V
V -right->> I
I -right->> P



rectangle "Scanning" as scanning <<$aService>> #A9DCDF
rectangle "Customer admnistration" as customerAdministration <<$aService>> #A9DCDF
rectangle "Claims admnistration" as claimsAdministration <<$aService>> #A9DCDF
rectangle Printing  <<$aService>> #A9DCDF
rectangle Payment  <<$aService>> #A9DCDF

scanning -up-> CI
customerAdministration  -up-> CI
claimsAdministration -up-> NAS
claimsAdministration -up-> V
claimsAdministration -up-> I
Printing -up-> V
Printing -up-> P
Payment -up-> P

rectangle "Document\nManagement\nSystem" as DMS <<$aComponent>> #A9DCDF
rectangle "General\nCRM\nSystem" as CRM <<$aComponent>> #A9DCDF
rectangle "Home & Away\nPolicy\nAdministration" as HAPA <<$aComponent>> #A9DCDF
rectangle "Home & Away\nFinancial\nAdministration" as HFPA <<$aComponent>> #A9DCDF

DMS .up.|> scanning
DMS .up.|> Printing
CRM .up.|> customerAdministration
HAPA .up.|> claimsAdministration
HFPA .up.|> Payment

legend left
Example from the "Archisurance case study" (OpenGroup).
See 
==
<$bProcess> :business process
==
<$aService> : application service
==
<$aComponent> : appplication component
endlegend
</uml>


===== Example 2 =====

<columns 100% 50% ->
<code>
@startuml
rectangle "Capture Information"  as CI <<$archimate/business-process>> #yellow
@enduml
</code>
<newcolumn>
<uml title="simple Archimate diagram">
rectangle "Capture Information"  as CI <<$archimate/business-process>> #yellow
</uml>
</columns>

===== List possible sprites =====

You can list all possible sprites for Archimate using the following diagram: 
<code>
listsprite
</code>

<uml title="simple Archimate diagram">
listsprite
</uml>
